// Multibranch Pipeline Configuration
// This file defines how Jenkins should handle different branches

pipeline {
    agent any

    environment {
        COMPOSE_FILES = "-f docker-compose.yml -f docker-compose.jenkins.yml"
        WORKDIR = "/var/jenkins_home/workspace/${env.JOB_NAME}/${env.BRANCH_NAME}"
        DOCKER_COMPOSE = "docker-compose"
        COMPOSE_OVERRIDE = "-f docker-compose.yml -f docker-compose.jenkins.yml"
    }

    // Branch-specific behavior
    options {
        // Skip duplicate builds
        skipDefaultCheckout(true)
        // Build only if there are changes
        skipStagesAfterUnstable()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('SonarQube Analysis') {
            when {
                // Only run on main branch or pull requests
                anyOf {
                    branch 'main'
                    branch 'master'
                    changeRequest()
                }
            }
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    sh 'sonar-scanner'
                }
            }
        }
        
        stage('Dependency Scan (OWASP)') {
            when {
                // Only run on main branch or pull requests
                anyOf {
                    branch 'main'
                    branch 'master'
                    changeRequest()
                }
            }
            steps {
                echo "üîí Running OWASP Dependency-Check on source code..."
                dir("${env.WORKDIR}/app") {
                    sh 'dependency-check --project "django-app" --scan . --format "HTML,JSON" --out /var/jenkins_home/depcheck-report || true'
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                echo "üîß Building Docker images for web and db..."
                dir("${env.WORKDIR}") {
                    sh "${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} build --no-cache web db"
                }
            }
        }
        
        stage('Trivy Image Scan') {
            when {
                // Only run on main branch or pull requests
                anyOf {
                    branch 'main'
                    branch 'master'
                    changeRequest()
                }
            }
            steps {
                echo "üîí Running Trivy scan on Django web image..."
                dir("${env.WORKDIR}") {
                    sh 'trivy image ci-cd-django-pipeline-web:latest || true'
                }
            }
        }
        
        stage('Start Services') {
            steps {
                echo "‚è≥ Starting database and web service..."
                dir("${env.WORKDIR}") {
                    sh "${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} up -d db web"
                    sh "sleep 10"  // Give services time to start
                }
            }
        }
        
        stage('Run Migrations') {
            steps {
                echo "üì¶ Running Django database migrations..."
                dir("${env.WORKDIR}") {
                    sh """
                        ${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} run --rm \
                        -w /usr/src/app \
                        web python manage.py migrate
                    """
                }
            }
        }
        
        stage('OWASP ZAP: DAST Scan') {
            when {
                // Only run on main branch or pull requests
                anyOf {
                    branch 'main'
                    branch 'master'
                    changeRequest()
                }
            }
            steps {
                echo "üîí Running OWASP ZAP DAST scan..."
                sh '''
                    sleep 10
                    docker run --network ci-cd-django-pipeline_default -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://web:8000/ -r zap-report.html || true
                '''
            }
        }
        
        stage('Generate SBOM (CycloneDX)') {
            when {
                // Only run on main branch or pull requests
                anyOf {
                    branch 'main'
                    branch 'master'
                    changeRequest()
                }
            }
            steps {
                echo "üì¶ Generating SBOM with Trivy..."
                sh 'trivy image --format cyclonedx --output sbom-cyclonedx.json ci-cd-django-pipeline-web:latest'
                archiveArtifacts artifacts: 'sbom-cyclonedx.json', fingerprint: true
            }
        }
        
        stage('Upload SBOM to Dependency-Track') {
            when {
                // Only run on main branch
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'DT_API_KEY', variable: 'DT_API_KEY')]) {
                    sh '''
                        curl -X POST "http://localhost:8081/api/v1/bom" \
                        -H "X-Api-Key: $DT_API_KEY" \
                        -H "Content-Type: multipart/form-data" \
                        -F "projectName=ci-cd-django" \
                        -F "autoCreate=true" \
                        -F "bom=@sbom-cyclonedx.json"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up containers and volumes (excluding Jenkins)..."
            dir("${env.WORKDIR}") {
                sh "${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} stop db web || true"
                sh "${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} rm -f db web || true"
                sh "docker volume prune -f || true"
            }
        }
        failure {
            echo "üí• Pipeline failed! Collecting logs..."
            dir("${env.WORKDIR}") {
                sh "${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} logs web || true"
                sh "${DOCKER_COMPOSE} ${COMPOSE_OVERRIDE} logs db || true"
            }
            // Example Slack notification (requires Slack plugin/config)
            slackSend (channel: '#ci-cd-alerts', color: 'danger', message: "‚ùå Build #${env.BUILD_NUMBER} failed: ${env.JOB_NAME} (${env.BRANCH_NAME})")
        }
        success {
            // Example Slack notification (requires Slack plugin/config)
            slackSend (channel: '#ci-cd-alerts', color: 'good', message: "‚úÖ Build #${env.BUILD_NUMBER} succeeded: ${env.JOB_NAME} (${env.BRANCH_NAME})")
        }
    }
} 